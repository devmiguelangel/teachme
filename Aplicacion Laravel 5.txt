1.  Setup y Base de Datos
1.1.  Instalacion y configuracion del proyecto
- /etc/hosts
192.168.10.10   teachme.app

- homestead edit
sites:
    - map: teachme.app
      to: /home/vagrant/Code/teachme/public

- mysql -uhomestead -p
create database teachme;

- .env
DB_DATABASE=teachme

php artisan migrate:install


1.2.  Creacion de las migraciones de nuestra aplicacion
- Control de versiones de base de datos
- Definir tablas con POO en vez de SQL
- Compatible con los diferentes motores
- Ideales para trabajar en equipo

php artisan make:model Entities/Ticket --migration
- database/migrations/2015_11_02_235039_create_tickets_table.php
public function up()
{
    Schema::create('tickets', function (Blueprint $table) {
        $table->increments('id');

        $table->string('title', 140);
        $table->enum('status', ['open', 'closed']);
        $table->integer('user_id')->unsigned();

        $table->timestamps();

        $table->foreign('user_id')->references('id')->on('users');
    });
}

php artisan make:model Entities/TicketVote --migration
- database/migrations/2015_11_02_235651_create_ticket_votes_table.php
public function up()
{
    Schema::create('ticket_votes', function (Blueprint $table) {
        $table->increments('id');

        $table->integer('user_id')->unsigned();
        $table->integer('ticket_id')->unsigned();

        $table->timestamps();

        $table->foreign('user_id')->references('id')->on('users');
        $table->foreign('ticket_id')->references('id')->on('tickets');
    });
}

- php artisan make:model Entities/TicketComment -m
- database/migrations/2015_11_03_000128_create_ticket_comments_table.php
public function up()
{
    Schema::create('ticket_comments', function (Blueprint $table) {
        $table->increments('id');

        $table->mediumText('comment');
        $table->string('link')->nullable();
        $table->integer('user_id')->unsigned();
        $table->integer('ticket_id')->unsigned();

        $table->timestamps();

        $table->foreign('user_id')->references('id')->on('users');
        $table->foreign('ticket_id')->references('id')->on('tickets');
    });
}

php artisan migrate


1.3.  Creacion del usuario administrador
php artisan app:name Teachme

php artisan make:seeder UserTableSeeder

- database/seeds/UserTableSeeder.php
public function run()
{
    $this->createAdmin();
}

private function createAdmin()
{
    User::create([
        'name'      => 'Miguel MG',
        'email'     => 'mmamani@coboser.com',
        'password'  => Hash::make('secret')
    ]);
}

- database/seeds/DatabaseSeeder.php
public function run()
{
    Model::unguard();

    $this->call(UserTableSeeder::class);

    Model::reguard();
}

php artisan db:seed


1.4.  Uso de faker para cargar decenas de registros
- database/seeds/UserTableSeeder.php
public function run()
{
    $this->createAdmin();
    $this->createUsers(50);
}

private function createUsers($number = 1)
{
    $faker = Faker::create();

    for ($i = 1; $i <= $number; $i++) {
        User::create([
            'name'      => $faker->name,
            'email'     => $faker->unique()->email,
            'password'  => Hash::make('secret')
        ]);
    }
}

php artisan migrate:refresh --seed


1.5.  Vaciar tablas que tengan restricciones de llaves foraneas
1.6.  Uso de herencia para reusar metodos
1.7.  Seeders con llaves foraneas
1.8.  Seeders para votos y comentarios
1.9.  Estandares para PHP

2.
3.