1.  Setup y Base de Datos
1.1.  Instalacion y configuracion del proyecto
- /etc/hosts
192.168.10.10   teachme.app

- homestead edit
sites:
    - map: teachme.app
      to: /home/vagrant/Code/teachme/public

- mysql -uhomestead -p
create database teachme;

- .env
DB_DATABASE=teachme

php artisan migrate:install


1.2.  Creacion de las migraciones de nuestra aplicacion
- Control de versiones de base de datos
- Definir tablas con POO en vez de SQL
- Compatible con los diferentes motores
- Ideales para trabajar en equipo

php artisan make:model Entities/Ticket --migration
- database/migrations/2015_11_02_235039_create_tickets_table.php
public function up()
{
    Schema::create('tickets', function (Blueprint $table) {
        $table->increments('id');

        $table->string('title', 140);
        $table->enum('status', ['open', 'closed']);
        $table->integer('user_id')->unsigned();

        $table->timestamps();

        $table->foreign('user_id')->references('id')->on('users');
    });
}

php artisan make:model Entities/TicketVote --migration
- database/migrations/2015_11_02_235651_create_ticket_votes_table.php
public function up()
{
    Schema::create('ticket_votes', function (Blueprint $table) {
        $table->increments('id');

        $table->integer('user_id')->unsigned();
        $table->integer('ticket_id')->unsigned();

        $table->timestamps();

        $table->foreign('user_id')->references('id')->on('users');
        $table->foreign('ticket_id')->references('id')->on('tickets');
    });
}

- php artisan make:model Entities/TicketComment -m
- database/migrations/2015_11_03_000128_create_ticket_comments_table.php
public function up()
{
    Schema::create('ticket_comments', function (Blueprint $table) {
        $table->increments('id');

        $table->mediumText('comment');
        $table->string('link')->nullable();
        $table->integer('user_id')->unsigned();
        $table->integer('ticket_id')->unsigned();

        $table->timestamps();

        $table->foreign('user_id')->references('id')->on('users');
        $table->foreign('ticket_id')->references('id')->on('tickets');
    });
}

php artisan migrate


1.3.  Creacion del usuario administrador
php artisan app:name Teachme

php artisan make:seeder UserTableSeeder

- database/seeds/UserTableSeeder.php
public function run()
{
    $this->createAdmin();
}

private function createAdmin()
{
    User::create([
        'name'      => 'Miguel MG',
        'email'     => 'mmamani@coboser.com',
        'password'  => Hash::make('secret')
    ]);
}

- database/seeds/DatabaseSeeder.php
public function run()
{
    Model::unguard();

    $this->call(UserTableSeeder::class);

    Model::reguard();
}

php artisan db:seed


1.4.  Uso de faker para cargar decenas de registros
- database/seeds/UserTableSeeder.php
public function run()
{
    $this->createAdmin();
    $this->createUsers(50);
}

private function createUsers($number = 1)
{
    $faker = Faker::create();

    for ($i = 1; $i <= $number; $i++) {
        User::create([
            'name'      => $faker->name,
            'email'     => $faker->unique()->email,
            'password'  => Hash::make('secret')
        ]);
    }
}

php artisan migrate:refresh --seed


1.5.  Vaciar tablas que tengan restricciones de llaves foraneas
- database/seeds/DatabaseSeeder.php
public function run()
{
    Model::unguard();

    $this->truncateTables([
        'users',
        'password_resets',
        'tickets',
        'ticket_votes',
        'ticket_comments',
    ]);

    $this->call(UserTableSeeder::class);

    Model::reguard();
}

private function truncateTables(array $tables)
{
    $this->checkForeignKeys(false);

    foreach ($tables as $table) {
        DB::table($table)->truncate();
    }

    $this->checkForeignKeys(true);
}

private function checkForeignKeys($check)
{
    $check = $check ? 1 : 0;

    DB::statement('SET foreign_key_checks = ' . $check . ';');
}

php artisan db:seed

- database/migrations/2015_11_02_235651_create_ticket_votes_table.php
public function up()
{
    Schema::create('ticket_votes', function (Blueprint $table) {
        ...

        $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
        $table->foreign('ticket_id')->references('id')->on('tickets')->onDelete('cascade');
    });
}

- database/migrations/2015_11_03_000128_create_ticket_comments_table.php
public function up()
{
    Schema::create('ticket_comments', function (Blueprint $table) {
        ...

        $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
        $table->foreign('ticket_id')->references('id')->on('tickets')->onDelete('cascade');
    });
}

php artisan migrate:refresh --seed


1.6.  Uso de herencia para reusar metodos
- database/seeds/BaseSeeder.php
abstract class BaseSeeder extends Seeder
{
    protected function createMultiple($total, array $customValues = [])
    {
        for ($i = 1; $i <= $total; $i++) {
            $this->create($customValues);
        }
    }

    abstract public function getModel();
    abstract public function getDummyData(Generator $faker);

    protected function create(array $customValues = [])
    {
        $values = $this->getDummyData(Faker::create());
        $values = array_merge($values, $customValues);

        $this->getModel()->create($values);
    }
}

- database/seeds/UserTableSeeder.php
class UserTableSeeder extends BaseSeeder
{

    public function getModel()
    {
        return new User();
    }

    public function getDummyData(Generator $faker)
    {
        return [
            'name'      => $faker->name,
            'email'     => $faker->unique()->email,
            'password'  => Hash::make('secret')
        ];
    }

    public function run()
    {
        $this->createAdmin();
        $this->createMultiple(44);
    }

    public function createAdmin()
    {
        $this->create([
            'name'      => 'Miguel MG',
            'email'     => 'mmamani@coboser.com',
            'password'  => Hash::make('secret')
        ]);
    }
}

- database/seeds/TicketTableSeeder.php
class TicketTableSeeder extends BaseSeeder
{

    public function getModel()
    {
        return new Ticket();
    }

    public function getDummyData(Generator $faker)
    {
        return [
            'title'   => $faker->sentence(),
            'status'  => $faker->randomElement(['open', 'open', 'closed']),
            'user_id' => 1
        ];
    }

    public function run()
    {
        $this->createMultiple(50);
    }
}

- database/seeds/DatabaseSeeder.php
public function run()
{
    ...

    $this->call(TicketTableSeeder::class);
}

php artisan db:seed


1.7.  Seeders con llaves foraneas
- database/seeds/BaseSeeder.php
protected function create(array $customValues = [])
{
    $values = $this->getDummyData(Faker::create());
    $values = array_merge($values, $customValues);

    $this->addToPool($this->getModel()->create($values));
}

protected function getRandom($model)
{
    if (! isset(static::$pool[$model])) {
        throw new Exception('The collection ' + $model + ' does not exist');
    }

    return static::$pool[$model]->random();
}

protected function addToPool($entity)
{
    $reflection = new ReflectionClass($entity);
    $class = $reflection->getShortName();

    if (! isset(static::$pool[$class])) {
        static::$pool[$class] = new Collection();
    }

    static::$pool[$class]->add($entity);

    return $entity;
}

- database/seeds/TicketTableSeeder.php
public function getDummyData(Generator $faker)
{
    return [
        'title'   => $faker->sentence(),
        'status'  => $faker->randomElement(['open', 'open', 'closed']),
        'user_id' => $this->getRandom('User')->id
    ];
}

php artisan db:seed


1.8.  Seeders para votos y comentarios
- database/seeds/BaseSeeder.php
abstract class BaseSeeder extends Seeder
{
    protected $total = 50;

    public function run()
    {
        $this->createMultiple($this->total);
    }

    ...
}

- database/seeds/TicketVoteTableSeeder.php
class TicketVoteTableSeeder extends BaseSeeder
{
    protected $total = 250;

    public function getModel()
    {
        return new TicketVote();
    }

    public function getDummyData(Generator $faker)
    {
        return [
            'user_id'   => $this->getRandom('User')->id,
            'ticket_id' => $this->getRandom('Ticket')->id
        ];
    }
}

- database/seeds/TicketCommentTableSeeder.php
class TicketCommentTableSeeder extends BaseSeeder
{
    protected $total = 300;

    public function getModel()
    {
        return new TicketComment();
    }

    public function getDummyData(Generator $faker)
    {
        return [
            'comment'   => $faker->paragraph(),
            'link'      => $faker->randomElement(['', '', $faker->url]),
            'user_id'   => $this->getRandom('User')->id,
            'ticket_id' => $this->getRandom('Ticket')->id
        ];
    }
}

- database/seeds/DatabaseSeeder.php
public function run()
{
    ...
    $this->call(UserTableSeeder::class);
    $this->call(TicketTableSeeder::class);
    $this->call(TicketVoteTableSeeder::class);
    $this->call(TicketCommentTableSeeder::class);
    ...
}

composer dump-autoload

php artisan db:seed


1.9.  Estandares para PHP
- http://www.php-fig.org/
- http://cs.sensiolabs.org/


2.  Desarrollo del prototipo
2.1.  Rutas y Controladores
- app/Http/routes.php
Route::get('/', [
    'as'   => 'ticket.latest',
    'uses' => 'TicketController@latest'
]);

Route::get('/popular', [
    'as'   => 'ticket.popular',
    'uses' => 'TicketController@popular'
]);

Route::get('/pending', [
    'as'   => 'ticket.open',
    'uses' => 'TicketController@open'
]);

Route::get('/tutorials', [
    'as'   => 'ticket.closed',
    'uses' => 'TicketController@closed'
]);

Route::get('/details/{id}', [
    'as'   => 'ticket.details',
    'uses' => 'TicketController@details'
]);

php artisan make:controller TicketController --plain

- app/Http/Controllers/TicketController.php
class TicketController extends Controller
{
    public function latest()
    {
        dd('Latest');
    }

    public function popular()
    {
        dd('Popular');
    }

    public function open()
    {
        dd('Open');
    }

    public function closed()
    {
        dd('Close');
    }

    public function details($id)
    {
        dd('Details: ' . $id);
    }
}


2.2.  Creando layouts e integrando Laravel Collective
composer require laravelcollective/html

- config/app.php
'providers' => [
    ...
    Collective\Html\HtmlServiceProvider::class,
    ...
],

'aliases' => [
    ...
    'Form'      => Collective\Html\FormFacade::class,
    'Html'      => Collective\Html\HtmlFacade::class,
    ...
],


2.3.  Extender la funcionalidad del framework
- resources/views/partials/menu.blade.php
...

- app/Components/HtmlBuilder.php
use Collective\Html\HtmlBuilder as CollectiveHtmlBuilder;

class HtmlBuilder extends CollectiveHtmlBuilder
{
    public function menu()
    {
        return view('partials.menu');
    }
}

- app/Providers/HtmlServiceProvider.php
use Collective\Html\HtmlServiceProvider as CollectiveHtmlServiceProvider;
use Teachme\Components\HtmlBuilder;

class HtmlServiceProvider extends CollectiveHtmlServiceProvider
{
    protected function registerHtmlBuilder()
    {
        $this->app->singleton('html', function ($app) {
            return new HtmlBuilder($app['url']);
        });
   }
}

- config/app.php
'providers' => [
    ...
    Teachme\Providers\HtmlServiceProvider::class,
    ...
],

- resources/views/layout.blade.php
{!! Html::menu() !!}


2.4.  Creando un componente para generar HTML
- config/teachme.php
return [
    'items' => [
        'ticket.latest'  => 'Recientes',
        'ticket.popular' => 'Populares',
        'ticket.open'    => 'Abiertas',
        'ticket.closed'  => 'Finalizadas',
    ],
];

- app/Components/HtmlBuilder.php
public function __construct(Config $config, View $view, UrlGenerator $url)
{
    $this->config = $config;
    $this->view   = $view;
    $this->url    = $url;

    parent::__construct($this->url);
}

public function menu($items)
{
    if (! is_array($items)) {
        $items = $this->config->get($items, []);
    }

    return $this->view->make('partials.menu', compact('items'));
}

public function classes(array $classes)
{
    $html = '';

    foreach ($classes as $name => $bool) {
        if (is_int($name)) {
            $name = $bool;
            $bool = true;
        }

        if ($bool) {
            $html .= $name . ' ';
        }
    }

    if (! empty($html)) {
        return 'class="' . trim($html) . '"';
    }

    return '';
}

- app/Providers/HtmlServiceProvider.php
protected function registerHtmlBuilder()
{
    $this->app->singleton('html', function ($app) {
        return new HtmlBuilder($app['config'], $app['view'], $app['url']);
    });
}

- resources/views/layout.blade.php
{!! Html::menu('teachme.items') !!}

- resources/views/partials/menu.blade.php
<ul class="nav navbar-nav">
    @foreach($items as $route => $text)
        <li role="presentation" {!! Html::classes(['active' => Route::is($route)]) !!}>
            <a href="{{ route($route) }}">{{ $text }}</a>
        </li>
    @endforeach
</ul>


2.5.  Paginas dinamicas de lista y detalles
- resources/views/tickets/list.blade.php
<p class="label label-info news">
    Hay {{ $tickets->total() }} Solicitudes Populares
</p>

@foreach($tickets as $ticket)
    @include('tickets.partials.item', compact('ticket'))
@endforeach

{!! $tickets->render() !!}

- resources/views/tickets/partials/status.blade.php
<span {!! Html::classes(['label label-info absolute', 'highlight' => $ticket->open]) !!}>
    {{ $ticket->status }}
</span>

- resources/views/tickets/partials/item.blade.php
<div data-id="25" class="well well-sm request">
    <h4 class="list-title">
        {{ $ticket->title }}

        @include('tickets.partials.status', compact('ticket'))

    </h4>
    <p>
        <a href="{{ route('ticket.details', ['id' => $ticket->id]) }}">
            <span class="votes-count">12 votos</span>
            - <span class="comments-count">0 comentarios</span>.
        </a>

        <p class="date-t">
            <span class="glyphicon glyphicon-time"></span>
            {{ $ticket->created_at->format('d/m/y h:i a') }}
        </p>
    </p>
</div>

- resources/views/tickets/details.blade.php
<h2 class="title-show">
    {{ $ticket->title }}

    @include('tickets.partials.status')
</h2>

<p class="date-t">
    <span class="glyphicon glyphicon-time"></span>
    {{ $ticket->created_at->format('d/m/y h:i a') }}
</p>

- app/Entities/Ticket.php
public function getOpenAttribute()
{
    return $this->status == 'open';
}

- app/Http/Controllers/TicketController.php
public function latest()
{
    $tickets = Ticket::orderBy('created_at', 'desc')->paginate(15);

    return view('tickets.list', compact('tickets'));
}

public function details($id)
{
    $ticket = Ticket::where('id', $id)->first();

    return view('tickets.details', compact('ticket'));
}


2.6.  Relacionar objetos con el ORM Eloquent
- app/Entities/Ticket.php
public function comments()
{
    return $this->hasMany(TicketComment::class, 'ticket_id', 'id');
}

public function voters()
{
    return $this->belongsToMany(User::class, 'ticket_votes', 'ticket_id', 'user_id');
}

- app/Entities/TicketComment.php
public function user()
{
    return $this->belongsTo(User::class, 'user_id', 'id');
}

- resources/views/tickets/partials/item.blade.php
<a href="{{ route('ticket.details', ['id' => $ticket->id]) }}">
    <span class="votes-count">{{ $ticket->voters->count() }} votos</span>
    - <span class="comments-count">{{ $ticket->comments->count() }} comentarios</span>.
</a>

- resources/views/tickets/details.blade.php
<h4 class="label label-info news">
    {{ $ticket->voters->count() }} votos
</h4>

<p class="vote-users">
    @foreach($ticket->voters as $voter)
        <span class="label label-info">{{ $voter->name }}</span>
    @endforeach
</p>

...

<h3>Comentarios ({{ $ticket->comments->count() }})</h3>

@foreach($ticket->comments as $comment)
    <div class="well well-sm">
        <p><strong>{{ $comment->user->name }}</strong></p>
        <p>{{ $comment->comment }}</p>
        <p class="date-t">
            <span class="glyphicon glyphicon-time"></span>
            {{ $comment->created_at->format('d/m/Y h:i a') }}
        </p>
    </div>
@endforeach


2.7.  Uso del componente de traducciones
- config/app.php
return [
    ...
    'locale' => 'es',

- resources/lang/es/teachme.php
return [
    'title' => [
        'ticket' => [
            'latest'  => 'Solicitudes Recientes',
            'popular' => 'Solicitudes Populares',
            'open'    => 'Solicitudes Abiertas',
            'closed'  => 'Tutoriales',
        ],
    ],

    'total' => [
        'ticket' => [
            'latest'  => '{0} No existen solicitudes recientes'
                        . '|{1} Solo existe una solicitud reciente'
                        . '|[2,Inf] Existen :count solicitudes recientes',
            'popular' => '{0} No existen solicitudes populares'
                        . '|{1} Solo existe una solicitud popular'
                        . '|[2,Inf] Existen :count solicitudes populares',
            'open'    => '{0} No existen solicitudes abiertas'
                        . '|{1} Solo existe una solicitud abierta'
                        . '|[2,Inf] Existen :count solicitudes abiertas',
            'closed'  => '{0} No existen tutoriales'
                        . '|{1} Solo existe un tutorial'
                        . '|[2,Inf] Existen :count tutoriales',
        ],
    ],

    'status' => [
        'open'   => 'Abierta',
        'closed' => 'Finalizada',
    ]
];

- resources/views/tickets/partials/status.blade.php
<span {!! Html::classes(['label label-info absolute', 'highlight' => $ticket->open]) !!}>
    {{ trans('teachme.status.' . $ticket->status) }}
</span>

- resources/views/tickets/list.blade.php
<h1>
    {{ trans('teachme.title.' . request()->route()->getName()) }}
    ...
</h1>

<p class="label label-info news">
    {{ trans_choice('teachme.total.' . request()->route()->getName(), $tickets->total()) }}
</p>


2.8. Login y Registro
- app/Http/routes.php
// Authentication routes
Route::get('auth/login', [
    'as'   => 'auth.get.login',
    'uses' => 'Auth\AuthController@getLogin'
]);

Route::post('auth/login', [
    'as'   => 'auth.post.login',
    'uses' => 'Auth\AuthController@postLogin'
]);

Route::get('auth/logout', [
    'as'   => 'auth.logout',
    'uses' => 'Auth\AuthController@getLogout'
]);

// Registration routes
Route::get('auth/register', 'Auth\AuthController@getRegister');
Route::post('auth/register', 'Auth\AuthController@postRegister');

- config/auth.php
return [
    ...
    'model' => Teachme\Entities\User::class,

- app/Http/Controllers/Auth/AuthController.php
use Teachme\Entities\User;
...

public function redirectPath()
{
    return '/';
}

- resources/views/layout.blade.php
<ul class="nav navbar-nav navbar-right">
  @if(auth()->check())
      <li class="dropdown">
          <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">
              {{ auth()->user()->name }} <span class="caret"></span>
          </a>
          <ul class="dropdown-menu" role="menu">
              <li><a href="{{ route('auth.logout') }}">Logout</a></li>
          </ul>
      </li>
  @else
      <li>
          <a href="{{ route('auth.get.login') }}">Login</a>
      </li>
      <li>
          <a href="{{ url('auth/register') }}">Registrate</a>
      </li>
  @endif
</ul>


2.9. Crear un grupo de rutas y protegerlas con un Middleware
- app/Http/routes.php
Route::group(['middleware' => 'auth'], function() {
    Route::get('/ticket/request', [
        'as'   => 'ticket.create',
        'uses' => 'TicketController@create'
    ]);
});

- app/Http/Controllers/TicketController.php
public function create() {
    return '[Form create ticket]';
}


2.10. Rutas de tipo POST y Formularios
2.11. Funcionalidad para crear solicitudes
2.12. Funcionalidad para votar (y quitar voto)
2.13. Funcionalidad para agregar comentarios


3.