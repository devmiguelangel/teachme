1.  Setup y Base de Datos
1.1.  Instalacion y configuracion del proyecto
- /etc/hosts
192.168.10.10   teachme.app

- homestead edit
sites:
    - map: teachme.app
      to: /home/vagrant/Code/teachme/public

- mysql -uhomestead -p
create database teachme;

- .env
DB_DATABASE=teachme

php artisan migrate:install


1.2.  Creacion de las migraciones de nuestra aplicacion
- Control de versiones de base de datos
- Definir tablas con POO en vez de SQL
- Compatible con los diferentes motores
- Ideales para trabajar en equipo

php artisan make:model Entities/Ticket --migration
- database/migrations/2015_11_02_235039_create_tickets_table.php
public function up()
{
    Schema::create('tickets', function (Blueprint $table) {
        $table->increments('id');

        $table->string('title', 140);
        $table->enum('status', ['open', 'closed']);
        $table->integer('user_id')->unsigned();

        $table->timestamps();

        $table->foreign('user_id')->references('id')->on('users');
    });
}

php artisan make:model Entities/TicketVote --migration
- database/migrations/2015_11_02_235651_create_ticket_votes_table.php
public function up()
{
    Schema::create('ticket_votes', function (Blueprint $table) {
        $table->increments('id');

        $table->integer('user_id')->unsigned();
        $table->integer('ticket_id')->unsigned();

        $table->timestamps();

        $table->foreign('user_id')->references('id')->on('users');
        $table->foreign('ticket_id')->references('id')->on('tickets');
    });
}

- php artisan make:model Entities/TicketComment -m
- database/migrations/2015_11_03_000128_create_ticket_comments_table.php
public function up()
{
    Schema::create('ticket_comments', function (Blueprint $table) {
        $table->increments('id');

        $table->mediumText('comment');
        $table->string('link')->nullable();
        $table->integer('user_id')->unsigned();
        $table->integer('ticket_id')->unsigned();

        $table->timestamps();

        $table->foreign('user_id')->references('id')->on('users');
        $table->foreign('ticket_id')->references('id')->on('tickets');
    });
}

php artisan migrate


1.3.  Creacion del usuario administrador
php artisan app:name Teachme

php artisan make:seeder UserTableSeeder

- database/seeds/UserTableSeeder.php
public function run()
{
    $this->createAdmin();
}

private function createAdmin()
{
    User::create([
        'name'      => 'Miguel MG',
        'email'     => 'mmamani@coboser.com',
        'password'  => Hash::make('secret')
    ]);
}

- database/seeds/DatabaseSeeder.php
public function run()
{
    Model::unguard();

    $this->call(UserTableSeeder::class);

    Model::reguard();
}

php artisan db:seed


1.4.  Uso de faker para cargar decenas de registros
- database/seeds/UserTableSeeder.php
public function run()
{
    $this->createAdmin();
    $this->createUsers(50);
}

private function createUsers($number = 1)
{
    $faker = Faker::create();

    for ($i = 1; $i <= $number; $i++) {
        User::create([
            'name'      => $faker->name,
            'email'     => $faker->unique()->email,
            'password'  => Hash::make('secret')
        ]);
    }
}

php artisan migrate:refresh --seed


1.5.  Vaciar tablas que tengan restricciones de llaves foraneas
- database/seeds/DatabaseSeeder.php
public function run()
{
    Model::unguard();

    $this->truncateTables([
        'users',
        'password_resets',
        'tickets',
        'ticket_votes',
        'ticket_comments',
    ]);

    $this->call(UserTableSeeder::class);

    Model::reguard();
}

private function truncateTables(array $tables)
{
    $this->checkForeignKeys(false);

    foreach ($tables as $table) {
        DB::table($table)->truncate();
    }

    $this->checkForeignKeys(true);
}

private function checkForeignKeys($check)
{
    $check = $check ? 1 : 0;

    DB::statement('SET foreign_key_checks = ' . $check . ';');
}

php artisan db:seed

- database/migrations/2015_11_02_235651_create_ticket_votes_table.php
public function up()
{
    Schema::create('ticket_votes', function (Blueprint $table) {
        ...

        $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
        $table->foreign('ticket_id')->references('id')->on('tickets')->onDelete('cascade');
    });
}

- database/migrations/2015_11_03_000128_create_ticket_comments_table.php
public function up()
{
    Schema::create('ticket_comments', function (Blueprint $table) {
        ...

        $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
        $table->foreign('ticket_id')->references('id')->on('tickets')->onDelete('cascade');
    });
}

php artisan migrate:refresh --seed


1.6.  Uso de herencia para reusar metodos
- database/seeds/BaseSeeder.php
abstract class BaseSeeder extends Seeder
{
    protected function createMultiple($total, array $customValues = [])
    {
        for ($i = 1; $i <= $total; $i++) {
            $this->create($customValues);
        }
    }

    abstract public function getModel();
    abstract public function getDummyData(Generator $faker);

    protected function create(array $customValues = [])
    {
        $values = $this->getDummyData(Faker::create());
        $values = array_merge($values, $customValues);

        $this->getModel()->create($values);
    }
}

- database/seeds/UserTableSeeder.php
class UserTableSeeder extends BaseSeeder
{

    public function getModel()
    {
        return new User();
    }

    public function getDummyData(Generator $faker)
    {
        return [
            'name'      => $faker->name,
            'email'     => $faker->unique()->email,
            'password'  => Hash::make('secret')
        ];
    }

    public function run()
    {
        $this->createAdmin();
        $this->createMultiple(44);
    }

    public function createAdmin()
    {
        $this->create([
            'name'      => 'Miguel MG',
            'email'     => 'mmamani@coboser.com',
            'password'  => Hash::make('secret')
        ]);
    }
}

- database/seeds/TicketTableSeeder.php
class TicketTableSeeder extends BaseSeeder
{

    public function getModel()
    {
        return new Ticket();
    }

    public function getDummyData(Generator $faker)
    {
        return [
            'title'   => $faker->sentence(),
            'status'  => $faker->randomElement(['open', 'open', 'closed']),
            'user_id' => 1
        ];
    }

    public function run()
    {
        $this->createMultiple(50);
    }
}

- database/seeds/DatabaseSeeder.php
public function run()
{
    ...

    $this->call(TicketTableSeeder::class);
}

php artisan db:seed


1.7.  Seeders con llaves foraneas
- database/seeds/BaseSeeder.php
protected function create(array $customValues = [])
{
    $values = $this->getDummyData(Faker::create());
    $values = array_merge($values, $customValues);

    $this->addToPool($this->getModel()->create($values));
}

protected function getRandom($model)
{
    if (! isset(static::$pool[$model])) {
        throw new Exception('The collection ' + $model + ' does not exist');
    }

    return static::$pool[$model]->random();
}

protected function addToPool($entity)
{
    $reflection = new ReflectionClass($entity);
    $class = $reflection->getShortName();

    if (! isset(static::$pool[$class])) {
        static::$pool[$class] = new Collection();
    }

    static::$pool[$class]->add($entity);

    return $entity;
}

- database/seeds/TicketTableSeeder.php
public function getDummyData(Generator $faker)
{
    return [
        'title'   => $faker->sentence(),
        'status'  => $faker->randomElement(['open', 'open', 'closed']),
        'user_id' => $this->getRandom('User')->id
    ];
}

php artisan db:seed


1.8.  Seeders para votos y comentarios
- database/seeds/BaseSeeder.php
abstract class BaseSeeder extends Seeder
{
    protected $total = 50;

    public function run()
    {
        $this->createMultiple($this->total);
    }

    ...
}

- database/seeds/TicketVoteTableSeeder.php
class TicketVoteTableSeeder extends BaseSeeder
{
    protected $total = 250;

    public function getModel()
    {
        return new TicketVote();
    }

    public function getDummyData(Generator $faker)
    {
        return [
            'user_id'   => $this->getRandom('User')->id,
            'ticket_id' => $this->getRandom('Ticket')->id
        ];
    }
}

- database/seeds/TicketCommentTableSeeder.php
class TicketCommentTableSeeder extends BaseSeeder
{
    protected $total = 300;

    public function getModel()
    {
        return new TicketComment();
    }

    public function getDummyData(Generator $faker)
    {
        return [
            'comment'   => $faker->paragraph(),
            'link'      => $faker->randomElement(['', '', $faker->url]),
            'user_id'   => $this->getRandom('User')->id,
            'ticket_id' => $this->getRandom('Ticket')->id
        ];
    }
}

- database/seeds/DatabaseSeeder.php
public function run()
{
    ...
    $this->call(UserTableSeeder::class);
    $this->call(TicketTableSeeder::class);
    $this->call(TicketVoteTableSeeder::class);
    $this->call(TicketCommentTableSeeder::class);
    ...
}

composer dump-autoload

php artisan db:seed


1.9.  Estandares para PHP
- http://www.php-fig.org/
- http://cs.sensiolabs.org/


2.  Desarrollo del prototipo
2.1.  Rutas y Controladores
- app/Http/routes.php
Route::get('/', [
    'as'   => 'ticket.latest',
    'uses' => 'TicketController@latest'
]);

Route::get('/popular', [
    'as'   => 'ticket.popular',
    'uses' => 'TicketController@popular'
]);

Route::get('/pending', [
    'as'   => 'ticket.open',
    'uses' => 'TicketController@open'
]);

Route::get('/tutorials', [
    'as'   => 'ticket.closed',
    'uses' => 'TicketController@closed'
]);

Route::get('/details/{id}', [
    'as'   => 'ticket.details',
    'uses' => 'TicketController@details'
]);

php artisan make:controller TicketController --plain

- app/Http/Controllers/TicketController.php
class TicketController extends Controller
{
    public function latest()
    {
        dd('Latest');
    }

    public function popular()
    {
        dd('Popular');
    }

    public function open()
    {
        dd('Open');
    }

    public function closed()
    {
        dd('Close');
    }

    public function details($id)
    {
        dd('Details: ' . $id);
    }
}


2.2.  Creando layouts e integrando Laravel Collective
composer require laravelcollective/html

- config/app.php
'providers' => [
    ...
    Collective\Html\HtmlServiceProvider::class,
    ...
],

'aliases' => [
    ...
    'Form'      => Collective\Html\FormFacade::class,
    'Html'      => Collective\Html\HtmlFacade::class,
    ...
],


2.3.  Extender la funcionalidad del framework
- resources/views/partials/menu.blade.php
...

- app/Components/HtmlBuilder.php
use Collective\Html\HtmlBuilder as CollectiveHtmlBuilder;

class HtmlBuilder extends CollectiveHtmlBuilder
{
    public function menu()
    {
        return view('partials.menu');
    }
}

- app/Providers/HtmlServiceProvider.php
use Collective\Html\HtmlServiceProvider as CollectiveHtmlServiceProvider;
use Teachme\Components\HtmlBuilder;

class HtmlServiceProvider extends CollectiveHtmlServiceProvider
{
    protected function registerHtmlBuilder()
    {
        $this->app->singleton('html', function ($app) {
            return new HtmlBuilder($app['url']);
        });
   }
}

- config/app.php
'providers' => [
    ...
    Teachme\Providers\HtmlServiceProvider::class,
    ...
],

- resources/views/layout.blade.php
{!! Html::menu() !!}


2.4.  Creando un componente para generar HTML
2.5.  Paginas dinamicas de lista y detalles
2.6.  Relacionar objetos con el ORM Eloquent
2.7.  Uso del componente de traducciones

2.10. Login y Registro
2.11. Crear un grupo de rutas y protegerlas con un Middleware
2.12. Rutas de tipo POST y Formularios
2.13. Funcionalidad para crear solicitudes
2.14. Funcionalidad para votar (y quitar voto)
2.15. Funcionalidad para agregar comentarios


3.